// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  email String @unique @db.VarChar(128)
  password String @db.VarChar(64)
  profilePicture String? @db.VarChar(255)
  rating Float @default(0)
  locationLat Float?
  locationLng Float?
  isLessor Boolean @default(false)
  createdAt DateTime @default(now())

  bikes Bike[] @relation("OwnerBikes")
  rentals Rental[] @relation("RenterRentals")
  reviews Review[] @relation("Reviewer")
  sentChats Chat[] @relation("SentChats")
  receivedChats Chat[] @relation("ReceivedChats")
  messages Message[] @relation("UserMessages")
}

model Bike {
  id Int @id @default(autoincrement())
  ownerId Int
  model String @db.VarChar(128)
  description String @db.VarChar(512)
  size String @db.VarChar(64)
  imagePath String @db.VarChar(255)
  hourlyRate Float
  maxUsageTime Int
  lateFee Float
  isAvailable Boolean @default(true)
  rating Float @default(0)
  locationLat Float
  locationLng Float
  createdAt DateTime @default(now())

  owner User @relation("OwnerBikes", fields: [ownerId], references: [id])

  rentals Rental[]
  reviews Review[]
}

model Rental {
  id Int @id @default(autoincrement())
  userId Int
  bikeId Int
  startTime DateTime @default(now())
  endTime DateTime?
  status String @db.VarChar(64)
  payment Payment?

  user User @relation("RenterRentals", fields: [userId], references: [id])
  bike Bike @relation(fields: [bikeId], references: [id])
}

model Review {
  id Int @id @default(autoincrement())
  userId Int
  bikeId Int
  rating Int
  comment String   @db.VarChar(512)
  createdAt DateTime @default(now())

  reviewer User @relation("Reviewer", fields: [userId], references: [id])
  bike Bike @relation(fields: [bikeId], references: [id])
}

model Chat {
  id Int @id @default(autoincrement())
  senderId Int
  receiverId Int
  messages Message[]

  sender User @relation("SentChats", fields: [senderId], references: [id])
  receiver User @relation("ReceivedChats", fields: [receiverId], references: [id])
}

model Message {
  id Int @id @default(autoincrement())
  chatId Int
  authorId Int
  content String @db.VarChar(512)
  createdAt DateTime @default(now())
  seen Boolean @default(false)

  chat Chat @relation(fields: [chatId], references: [id])
  author User @relation("UserMessages", fields: [authorId], references: [id])
}

model Payment {
  id Int @id @default(autoincrement())
  rentalId Int @unique
  method String @db.VarChar(64)
  amount Float
  status String @db.VarChar(64)
  createdAt DateTime @default(now())

  rental Rental @relation(fields: [rentalId], references: [id])
}